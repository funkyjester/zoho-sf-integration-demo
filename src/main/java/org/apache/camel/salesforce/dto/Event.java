/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin.
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.Attributes;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject Event
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("Event")
public class Event extends AbstractDescribedSObjectBase {

    public Event() {
        getAttributes().setType("Event");
    }

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    private String WhoId;

    @JsonProperty("WhoId")
    public String getWhoId() {
        return this.WhoId;
    }

    @JsonProperty("WhoId")
    public void setWhoId(String WhoId) {
        this.WhoId = WhoId;
    }

     @XStreamAlias("Who")
    private AbstractDescribedSObjectBase Who;

    @JsonProperty("Who")
    public AbstractDescribedSObjectBase getWho() {
        return this.Who;
    }

    @JsonProperty("Who")
    public void setWho(AbstractDescribedSObjectBase Who) {
        this.Who = Who;
    }
    private String WhatId;

    @JsonProperty("WhatId")
    public String getWhatId() {
        return this.WhatId;
    }

    @JsonProperty("WhatId")
    public void setWhatId(String WhatId) {
        this.WhatId = WhatId;
    }

     @XStreamAlias("What")
    private AbstractDescribedSObjectBase What;

    @JsonProperty("What")
    public AbstractDescribedSObjectBase getWhat() {
        return this.What;
    }

    @JsonProperty("What")
    public void setWhat(AbstractDescribedSObjectBase What) {
        this.What = What;
    }
    private String Subject;

    @JsonProperty("Subject")
    public String getSubject() {
        return this.Subject;
    }

    @JsonProperty("Subject")
    public void setSubject(String Subject) {
        this.Subject = Subject;
    }

    private String Location;

    @JsonProperty("Location")
    public String getLocation() {
        return this.Location;
    }

    @JsonProperty("Location")
    public void setLocation(String Location) {
        this.Location = Location;
    }

    private Boolean IsAllDayEvent;

    @JsonProperty("IsAllDayEvent")
    public Boolean getIsAllDayEvent() {
        return this.IsAllDayEvent;
    }

    @JsonProperty("IsAllDayEvent")
    public void setIsAllDayEvent(Boolean IsAllDayEvent) {
        this.IsAllDayEvent = IsAllDayEvent;
    }

    private java.time.ZonedDateTime ActivityDateTime;

    @JsonProperty("ActivityDateTime")
    public java.time.ZonedDateTime getActivityDateTime() {
        return this.ActivityDateTime;
    }

    @JsonProperty("ActivityDateTime")
    public void setActivityDateTime(java.time.ZonedDateTime ActivityDateTime) {
        this.ActivityDateTime = ActivityDateTime;
    }

    private java.time.LocalDate ActivityDate;

    @JsonProperty("ActivityDate")
    public java.time.LocalDate getActivityDate() {
        return this.ActivityDate;
    }

    @JsonProperty("ActivityDate")
    public void setActivityDate(java.time.LocalDate ActivityDate) {
        this.ActivityDate = ActivityDate;
    }

    private Integer DurationInMinutes;

    @JsonProperty("DurationInMinutes")
    public Integer getDurationInMinutes() {
        return this.DurationInMinutes;
    }

    @JsonProperty("DurationInMinutes")
    public void setDurationInMinutes(Integer DurationInMinutes) {
        this.DurationInMinutes = DurationInMinutes;
    }

    private java.time.ZonedDateTime StartDateTime;

    @JsonProperty("StartDateTime")
    public java.time.ZonedDateTime getStartDateTime() {
        return this.StartDateTime;
    }

    @JsonProperty("StartDateTime")
    public void setStartDateTime(java.time.ZonedDateTime StartDateTime) {
        this.StartDateTime = StartDateTime;
    }

    private java.time.ZonedDateTime EndDateTime;

    @JsonProperty("EndDateTime")
    public java.time.ZonedDateTime getEndDateTime() {
        return this.EndDateTime;
    }

    @JsonProperty("EndDateTime")
    public void setEndDateTime(java.time.ZonedDateTime EndDateTime) {
        this.EndDateTime = EndDateTime;
    }

    private String Description;

    @JsonProperty("Description")
    public String getDescription() {
        return this.Description;
    }

    @JsonProperty("Description")
    public void setDescription(String Description) {
        this.Description = Description;
    }

    private String AccountId;

    @JsonProperty("AccountId")
    public String getAccountId() {
        return this.AccountId;
    }

    @JsonProperty("AccountId")
    public void setAccountId(String AccountId) {
        this.AccountId = AccountId;
    }

     @XStreamAlias("Account")
    private Account Account;

    @JsonProperty("Account")
    public Account getAccount() {
        return this.Account;
    }

    @JsonProperty("Account")
    public void setAccount(Account Account) {
        this.Account = Account;
    }
    private Boolean IsPrivate;

    @JsonProperty("IsPrivate")
    public Boolean getIsPrivate() {
        return this.IsPrivate;
    }

    @JsonProperty("IsPrivate")
    public void setIsPrivate(Boolean IsPrivate) {
        this.IsPrivate = IsPrivate;
    }

    @XStreamConverter(PicklistEnumConverter.class)
    private Event_ShowAsEnum ShowAs;

    @JsonProperty("ShowAs")
    public Event_ShowAsEnum getShowAs() {
        return this.ShowAs;
    }

    @JsonProperty("ShowAs")
    public void setShowAs(Event_ShowAsEnum ShowAs) {
        this.ShowAs = ShowAs;
    }

    private Boolean IsChild;

    @JsonProperty("IsChild")
    public Boolean getIsChild() {
        return this.IsChild;
    }

    @JsonProperty("IsChild")
    public void setIsChild(Boolean IsChild) {
        this.IsChild = IsChild;
    }

    private Boolean IsGroupEvent;

    @JsonProperty("IsGroupEvent")
    public Boolean getIsGroupEvent() {
        return this.IsGroupEvent;
    }

    @JsonProperty("IsGroupEvent")
    public void setIsGroupEvent(Boolean IsGroupEvent) {
        this.IsGroupEvent = IsGroupEvent;
    }

    @XStreamConverter(PicklistEnumConverter.class)
    private Event_GroupEventTypeEnum GroupEventType;

    @JsonProperty("GroupEventType")
    public Event_GroupEventTypeEnum getGroupEventType() {
        return this.GroupEventType;
    }

    @JsonProperty("GroupEventType")
    public void setGroupEventType(Event_GroupEventTypeEnum GroupEventType) {
        this.GroupEventType = GroupEventType;
    }

    private Boolean IsArchived;

    @JsonProperty("IsArchived")
    public Boolean getIsArchived() {
        return this.IsArchived;
    }

    @JsonProperty("IsArchived")
    public void setIsArchived(Boolean IsArchived) {
        this.IsArchived = IsArchived;
    }

    private String RecurrenceActivityId;

    @JsonProperty("RecurrenceActivityId")
    public String getRecurrenceActivityId() {
        return this.RecurrenceActivityId;
    }

    @JsonProperty("RecurrenceActivityId")
    public void setRecurrenceActivityId(String RecurrenceActivityId) {
        this.RecurrenceActivityId = RecurrenceActivityId;
    }

    private Boolean IsRecurrence;

    @JsonProperty("IsRecurrence")
    public Boolean getIsRecurrence() {
        return this.IsRecurrence;
    }

    @JsonProperty("IsRecurrence")
    public void setIsRecurrence(Boolean IsRecurrence) {
        this.IsRecurrence = IsRecurrence;
    }

    private java.time.ZonedDateTime RecurrenceStartDateTime;

    @JsonProperty("RecurrenceStartDateTime")
    public java.time.ZonedDateTime getRecurrenceStartDateTime() {
        return this.RecurrenceStartDateTime;
    }

    @JsonProperty("RecurrenceStartDateTime")
    public void setRecurrenceStartDateTime(java.time.ZonedDateTime RecurrenceStartDateTime) {
        this.RecurrenceStartDateTime = RecurrenceStartDateTime;
    }

    private java.time.LocalDate RecurrenceEndDateOnly;

    @JsonProperty("RecurrenceEndDateOnly")
    public java.time.LocalDate getRecurrenceEndDateOnly() {
        return this.RecurrenceEndDateOnly;
    }

    @JsonProperty("RecurrenceEndDateOnly")
    public void setRecurrenceEndDateOnly(java.time.LocalDate RecurrenceEndDateOnly) {
        this.RecurrenceEndDateOnly = RecurrenceEndDateOnly;
    }

    @XStreamConverter(PicklistEnumConverter.class)
    private Event_RecurrenceTimeZoneSidKeyEnum RecurrenceTimeZoneSidKey;

    @JsonProperty("RecurrenceTimeZoneSidKey")
    public Event_RecurrenceTimeZoneSidKeyEnum getRecurrenceTimeZoneSidKey() {
        return this.RecurrenceTimeZoneSidKey;
    }

    @JsonProperty("RecurrenceTimeZoneSidKey")
    public void setRecurrenceTimeZoneSidKey(Event_RecurrenceTimeZoneSidKeyEnum RecurrenceTimeZoneSidKey) {
        this.RecurrenceTimeZoneSidKey = RecurrenceTimeZoneSidKey;
    }

    @XStreamConverter(PicklistEnumConverter.class)
    private Event_RecurrenceTypeEnum RecurrenceType;

    @JsonProperty("RecurrenceType")
    public Event_RecurrenceTypeEnum getRecurrenceType() {
        return this.RecurrenceType;
    }

    @JsonProperty("RecurrenceType")
    public void setRecurrenceType(Event_RecurrenceTypeEnum RecurrenceType) {
        this.RecurrenceType = RecurrenceType;
    }

    private Integer RecurrenceInterval;

    @JsonProperty("RecurrenceInterval")
    public Integer getRecurrenceInterval() {
        return this.RecurrenceInterval;
    }

    @JsonProperty("RecurrenceInterval")
    public void setRecurrenceInterval(Integer RecurrenceInterval) {
        this.RecurrenceInterval = RecurrenceInterval;
    }

    private Integer RecurrenceDayOfWeekMask;

    @JsonProperty("RecurrenceDayOfWeekMask")
    public Integer getRecurrenceDayOfWeekMask() {
        return this.RecurrenceDayOfWeekMask;
    }

    @JsonProperty("RecurrenceDayOfWeekMask")
    public void setRecurrenceDayOfWeekMask(Integer RecurrenceDayOfWeekMask) {
        this.RecurrenceDayOfWeekMask = RecurrenceDayOfWeekMask;
    }

    private Integer RecurrenceDayOfMonth;

    @JsonProperty("RecurrenceDayOfMonth")
    public Integer getRecurrenceDayOfMonth() {
        return this.RecurrenceDayOfMonth;
    }

    @JsonProperty("RecurrenceDayOfMonth")
    public void setRecurrenceDayOfMonth(Integer RecurrenceDayOfMonth) {
        this.RecurrenceDayOfMonth = RecurrenceDayOfMonth;
    }

    @XStreamConverter(PicklistEnumConverter.class)
    private Event_RecurrenceInstanceEnum RecurrenceInstance;

    @JsonProperty("RecurrenceInstance")
    public Event_RecurrenceInstanceEnum getRecurrenceInstance() {
        return this.RecurrenceInstance;
    }

    @JsonProperty("RecurrenceInstance")
    public void setRecurrenceInstance(Event_RecurrenceInstanceEnum RecurrenceInstance) {
        this.RecurrenceInstance = RecurrenceInstance;
    }

    @XStreamConverter(PicklistEnumConverter.class)
    private Event_RecurrenceMonthOfYearEnum RecurrenceMonthOfYear;

    @JsonProperty("RecurrenceMonthOfYear")
    public Event_RecurrenceMonthOfYearEnum getRecurrenceMonthOfYear() {
        return this.RecurrenceMonthOfYear;
    }

    @JsonProperty("RecurrenceMonthOfYear")
    public void setRecurrenceMonthOfYear(Event_RecurrenceMonthOfYearEnum RecurrenceMonthOfYear) {
        this.RecurrenceMonthOfYear = RecurrenceMonthOfYear;
    }

    private java.time.ZonedDateTime ReminderDateTime;

    @JsonProperty("ReminderDateTime")
    public java.time.ZonedDateTime getReminderDateTime() {
        return this.ReminderDateTime;
    }

    @JsonProperty("ReminderDateTime")
    public void setReminderDateTime(java.time.ZonedDateTime ReminderDateTime) {
        this.ReminderDateTime = ReminderDateTime;
    }

    private Boolean IsReminderSet;

    @JsonProperty("IsReminderSet")
    public Boolean getIsReminderSet() {
        return this.IsReminderSet;
    }

    @JsonProperty("IsReminderSet")
    public void setIsReminderSet(Boolean IsReminderSet) {
        this.IsReminderSet = IsReminderSet;
    }

     private QueryRecordsEvent RecurringEvents;

    @JsonProperty("RecurringEvents")
    public QueryRecordsEvent getRecurringEvents() {
        return RecurringEvents;
    }

    @JsonProperty("RecurringEvents")
    public void setRecurringEvents(QueryRecordsEvent RecurringEvents) {
        this.RecurringEvents = RecurringEvents;
    }

    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Activity ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("WhoId", "Name ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("WhatId", "Related To ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("Subject", "Subject", "combobox", "xsd:string", 255, false, true, true, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("Location", "Location", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("IsAllDayEvent", "All-Day Event", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("ActivityDateTime", "Due Date Time", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("ActivityDate", "Due Date Only", "date", "xsd:date", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("DurationInMinutes", "Duration", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("StartDateTime", "Start Date Time", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("EndDateTime", "End Date Time", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("Description", "Description", "textarea", "xsd:string", 32000, false, true, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("AccountId", "Account ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("OwnerId", "Assigned To ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("IsPrivate", "Private", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField15);
        final SObjectField sObjectField16 = createField("ShowAs", "Show Time As", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField16);
        final SObjectField sObjectField17 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField17);
        final SObjectField sObjectField18 = createField("IsChild", "Is Child", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField18);
        final SObjectField sObjectField19 = createField("IsGroupEvent", "Is Group Event", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField19);
        final SObjectField sObjectField20 = createField("GroupEventType", "Group Event Type", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField20);
        final SObjectField sObjectField21 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField21);
        final SObjectField sObjectField22 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField22);
        final SObjectField sObjectField23 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField23);
        final SObjectField sObjectField24 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField24);
        final SObjectField sObjectField25 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField25);
        final SObjectField sObjectField26 = createField("IsArchived", "Archived", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField26);
        final SObjectField sObjectField27 = createField("RecurrenceActivityId", "Recurrence Activity ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField27);
        final SObjectField sObjectField28 = createField("IsRecurrence", "Create Recurring Series of Events", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField28);
        final SObjectField sObjectField29 = createField("RecurrenceStartDateTime", "Recurrence Start", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField29);
        final SObjectField sObjectField30 = createField("RecurrenceEndDateOnly", "Recurrence End", "date", "xsd:date", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField30);
        final SObjectField sObjectField31 = createField("RecurrenceTimeZoneSidKey", "Recurrence Time Zone", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField31);
        final SObjectField sObjectField32 = createField("RecurrenceType", "Recurrence Type", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField32);
        final SObjectField sObjectField33 = createField("RecurrenceInterval", "Recurrence Interval", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField33);
        final SObjectField sObjectField34 = createField("RecurrenceDayOfWeekMask", "Recurrence Day of Week Mask", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField34);
        final SObjectField sObjectField35 = createField("RecurrenceDayOfMonth", "Recurrence Day of Month", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField35);
        final SObjectField sObjectField36 = createField("RecurrenceInstance", "Recurrence Instance", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField36);
        final SObjectField sObjectField37 = createField("RecurrenceMonthOfYear", "Recurrence Month of Year", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField37);
        final SObjectField sObjectField38 = createField("ReminderDateTime", "Reminder Date/Time", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField38);
        final SObjectField sObjectField39 = createField("IsReminderSet", "Reminder Set", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField39);

        description.setLabel("Event");
        description.setLabelPlural("Events");
        description.setName("Event");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setCompactLayouts("/services/data/v34.0/sobjects/Event/describe/compactLayouts");
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/Event/describe");
        sObjectDescriptionUrls1.setLayouts("/services/data/v34.0/sobjects/Event/describe/layouts");
        sObjectDescriptionUrls1.setQuickActions("/services/data/v34.0/sobjects/Event/quickActions");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/Event/{ID}");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/Event");
        sObjectDescriptionUrls1.setUiDetailTemplate("https://gabrielchanca-dev-ed.my.salesforce.com/{ID}");
        sObjectDescriptionUrls1.setUiEditTemplate("https://gabrielchanca-dev-ed.my.salesforce.com/{ID}/e");
        sObjectDescriptionUrls1.setUiNewRecord("https://gabrielchanca-dev-ed.my.salesforce.com/00U/e");
        description.setUrls(sObjectDescriptionUrls1);

        return description;
    }
}

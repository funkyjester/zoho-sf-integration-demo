/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin.
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.Attributes;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject EmailMessage
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("EmailMessage")
public class EmailMessage extends AbstractDescribedSObjectBase {

    public EmailMessage() {
        getAttributes().setType("EmailMessage");
    }

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    private String ParentId;

    @JsonProperty("ParentId")
    public String getParentId() {
        return this.ParentId;
    }

    @JsonProperty("ParentId")
    public void setParentId(String ParentId) {
        this.ParentId = ParentId;
    }

    private String ActivityId;

    @JsonProperty("ActivityId")
    public String getActivityId() {
        return this.ActivityId;
    }

    @JsonProperty("ActivityId")
    public void setActivityId(String ActivityId) {
        this.ActivityId = ActivityId;
    }

    private String TextBody;

    @JsonProperty("TextBody")
    public String getTextBody() {
        return this.TextBody;
    }

    @JsonProperty("TextBody")
    public void setTextBody(String TextBody) {
        this.TextBody = TextBody;
    }

    private String HtmlBody;

    @JsonProperty("HtmlBody")
    public String getHtmlBody() {
        return this.HtmlBody;
    }

    @JsonProperty("HtmlBody")
    public void setHtmlBody(String HtmlBody) {
        this.HtmlBody = HtmlBody;
    }

    private String Headers;

    @JsonProperty("Headers")
    public String getHeaders() {
        return this.Headers;
    }

    @JsonProperty("Headers")
    public void setHeaders(String Headers) {
        this.Headers = Headers;
    }

    private String Subject;

    @JsonProperty("Subject")
    public String getSubject() {
        return this.Subject;
    }

    @JsonProperty("Subject")
    public void setSubject(String Subject) {
        this.Subject = Subject;
    }

    private String FromName;

    @JsonProperty("FromName")
    public String getFromName() {
        return this.FromName;
    }

    @JsonProperty("FromName")
    public void setFromName(String FromName) {
        this.FromName = FromName;
    }

    private String FromAddress;

    @JsonProperty("FromAddress")
    public String getFromAddress() {
        return this.FromAddress;
    }

    @JsonProperty("FromAddress")
    public void setFromAddress(String FromAddress) {
        this.FromAddress = FromAddress;
    }

    private String ToAddress;

    @JsonProperty("ToAddress")
    public String getToAddress() {
        return this.ToAddress;
    }

    @JsonProperty("ToAddress")
    public void setToAddress(String ToAddress) {
        this.ToAddress = ToAddress;
    }

    private String CcAddress;

    @JsonProperty("CcAddress")
    public String getCcAddress() {
        return this.CcAddress;
    }

    @JsonProperty("CcAddress")
    public void setCcAddress(String CcAddress) {
        this.CcAddress = CcAddress;
    }

    private String BccAddress;

    @JsonProperty("BccAddress")
    public String getBccAddress() {
        return this.BccAddress;
    }

    @JsonProperty("BccAddress")
    public void setBccAddress(String BccAddress) {
        this.BccAddress = BccAddress;
    }

    private Boolean Incoming;

    @JsonProperty("Incoming")
    public Boolean getIncoming() {
        return this.Incoming;
    }

    @JsonProperty("Incoming")
    public void setIncoming(Boolean Incoming) {
        this.Incoming = Incoming;
    }

    private Boolean HasAttachment;

    @JsonProperty("HasAttachment")
    public Boolean getHasAttachment() {
        return this.HasAttachment;
    }

    @JsonProperty("HasAttachment")
    public void setHasAttachment(Boolean HasAttachment) {
        this.HasAttachment = HasAttachment;
    }

    @XStreamConverter(PicklistEnumConverter.class)
    private EmailMessage_StatusEnum Status;

    @JsonProperty("Status")
    public EmailMessage_StatusEnum getStatus() {
        return this.Status;
    }

    @JsonProperty("Status")
    public void setStatus(EmailMessage_StatusEnum Status) {
        this.Status = Status;
    }

    private java.time.ZonedDateTime MessageDate;

    @JsonProperty("MessageDate")
    public java.time.ZonedDateTime getMessageDate() {
        return this.MessageDate;
    }

    @JsonProperty("MessageDate")
    public void setMessageDate(java.time.ZonedDateTime MessageDate) {
        this.MessageDate = MessageDate;
    }

    private String ReplyToEmailMessageId;

    @JsonProperty("ReplyToEmailMessageId")
    public String getReplyToEmailMessageId() {
        return this.ReplyToEmailMessageId;
    }

    @JsonProperty("ReplyToEmailMessageId")
    public void setReplyToEmailMessageId(String ReplyToEmailMessageId) {
        this.ReplyToEmailMessageId = ReplyToEmailMessageId;
    }

    private Boolean IsExternallyVisible;

    @JsonProperty("IsExternallyVisible")
    public Boolean getIsExternallyVisible() {
        return this.IsExternallyVisible;
    }

    @JsonProperty("IsExternallyVisible")
    public void setIsExternallyVisible(Boolean IsExternallyVisible) {
        this.IsExternallyVisible = IsExternallyVisible;
    }

 
    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Email Message ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("ParentId", "Case ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("ActivityId", "Activity ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("TextBody", "Text Body", "textarea", "xsd:string", 32000, false, true, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("HtmlBody", "HTML Body", "textarea", "xsd:string", 32000, false, true, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("Headers", "Headers", "textarea", "xsd:string", 32000, false, true, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("Subject", "Subject", "string", "xsd:string", 3000, false, true, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("FromName", "From Name", "string", "xsd:string", 1000, false, true, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("FromAddress", "From Address", "email", "xsd:string", 1000, false, true, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("ToAddress", "To Address", "string", "xsd:string", 4000, false, true, false, false, false, false, false);
        fields1.add(sObjectField15);
        final SObjectField sObjectField16 = createField("CcAddress", "CC Address", "string", "xsd:string", 4000, false, true, false, false, false, false, false);
        fields1.add(sObjectField16);
        final SObjectField sObjectField17 = createField("BccAddress", "BCC Address", "string", "xsd:string", 4000, false, true, false, false, false, false, false);
        fields1.add(sObjectField17);
        final SObjectField sObjectField18 = createField("Incoming", "Is Incoming", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField18);
        final SObjectField sObjectField19 = createField("HasAttachment", "Has Attachment", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField19);
        final SObjectField sObjectField20 = createField("Status", "Status", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField20);
        final SObjectField sObjectField21 = createField("MessageDate", "Message Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField21);
        final SObjectField sObjectField22 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField22);
        final SObjectField sObjectField23 = createField("ReplyToEmailMessageId", "Email Message ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField23);
        final SObjectField sObjectField24 = createField("IsExternallyVisible", "Is Externally Visible", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField24);

        description.setLabel("Email Message");
        description.setLabelPlural("Email Messages");
        description.setName("EmailMessage");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setApprovalLayouts("/services/data/v34.0/sobjects/EmailMessage/describe/approvalLayouts");
        sObjectDescriptionUrls1.setCompactLayouts("/services/data/v34.0/sobjects/EmailMessage/describe/compactLayouts");
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/EmailMessage/describe");
        sObjectDescriptionUrls1.setLayouts("/services/data/v34.0/sobjects/EmailMessage/describe/layouts");
        sObjectDescriptionUrls1.setQuickActions("/services/data/v34.0/sobjects/EmailMessage/quickActions");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/EmailMessage/{ID}");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/EmailMessage");
        sObjectDescriptionUrls1.setUiDetailTemplate("https://gabrielchanca-dev-ed.my.salesforce.com/{ID}");
        sObjectDescriptionUrls1.setUiEditTemplate("https://gabrielchanca-dev-ed.my.salesforce.com/{ID}/e");
        sObjectDescriptionUrls1.setUiNewRecord("https://gabrielchanca-dev-ed.my.salesforce.com/02s/e");
        description.setUrls(sObjectDescriptionUrls1);

        return description;
    }
}
